ctr shift p: user snippet -> typescriptreact
https://gist.github.com/benawad/1e9dd01994f78489306fbfd6f7b01cd3#file-snippets-typescriptreact-json
rh snippet

const client = createClient({
    url: "http://localhost:4000/graphql",
    fetchOptions: {
      credentials: "include", //to provide cookie with each request
    },
  });



//using query build, replaced // lines with the other lines
// const user = em.create(User, {
    //   username: options.username,
    //   password: hashedPassword,
    // });
    let user;
    try {
      const result = await (em as EntityManager)
        .createQueryBuilder(User)
        .getKnexQuery()
        .insert({
          username: options.username,
          password: hashedPassword,
          created_at: new Date(),
          updated_at: new Date(),
        })
        .returning("*");
        user = result[0]
      // await em.persistAndFlush(user);
    }

//this is how he converted the object
[{field:'username', message: 'something wrong'}] -> [{username: 'something wrong'}]
setErrors(toErrorMap(response.data.register.errors));
import { FieldError } from "../generated/graphql";
export const toErrorMap = (errors: FieldError[]) => {
  const errorMap: Record<string, string> = {};
  errors.forEach(({ field, message }) => {
    errorMap[field] = message;
  });
  return errorMap;
};
/////////

cache:


// cntr shift p organize imports // to remove all unused imports 

//to not load data when we are on the server
export const isServer = () => typeof window === "undefined";
useMeQuery({
  pause: isServer(),
});



// hay bi next js, research about it 
ChangePassword.getInitialProps = ({query}) => {
    return {
        token: query.token as string
    }
}


global error handling:
github.com/formidableLabs/urql/issues/225
// I added it to createUrqlClient.txt